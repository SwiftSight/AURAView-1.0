import React, { useState, useRef, useEffect } from 'react';
import { Stage, Layer, Image, Rect, Text } from 'react-konva';

const EnhancedStitchingResultViewer = ({ imageUrl, originalImages }) => {
  const [image, setImage] = useState(null);
  const [scale, setScale] = useState(1);
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const [annotations, setAnnotations] = useState([]);
  const [mode, setMode] = useState('pan'); // 'pan', 'annotate', 'compare'
  const [compareImage, setCompareImage] = useState(null);
  const [comparePosition, setComparePosition] = useState({ x: 0, y: 0 });
  const stageRef = useRef(null);

  useEffect(() => {
    const img = new window.Image();
    img.src = imageUrl;
    img.onload = () => setImage(img);
  }, [imageUrl]);

  const handleWheel = (e) => {
    e.evt.preventDefault();
    const scaleBy = 1.1;
    const stage = e.target.getStage();
    const oldScale = stage.scaleX();
    const mousePointTo = {
      x: stage.getPointerPosition().x / oldScale - stage.x() / oldScale,
      y: stage.getPointerPosition().y / oldScale - stage.y() / oldScale,
    };

    const newScale = e.evt.deltaY > 0 ? oldScale / scaleBy : oldScale * scaleBy;

    stage.scale({ x: newScale, y: newScale });

    const newPos = {
      x: -(mousePointTo.x - stage.getPointerPosition().x / newScale) * newScale,
      y: -(mousePointTo.y - stage.getPointerPosition().y / newScale) * newScale,
    };
    stage.position(newPos);
    stage.batchDraw();

    setScale(newScale);
    setPosition(newPos);
  };

  const handleDragStart = (e) => {
    if (mode !== 'pan') return;
    const id = e.target.id();
    const annotations = stageRef.current.find(`#${id}`);
    // remove annotation from the array
    annotations.forEach((shape) => {
      shape.moveTo(stageRef.current.getLayers()[1]);
    });
  };

  const handleDragEnd = (e) => {
    if (mode !== 'pan') return;
    const id = e.target.id();
    const annotations = stageRef.current.find(`#${id}`);
    // add annotation to the array
    annotations.forEach((shape) => {
      shape.moveTo(stageRef.current.getLayers()[0]);
    });
  };

  const handleClick = (e) => {
    if (mode !== 'annotate') return;
    const stage = e.target.getStage();
    const pos = stage.getPointerPosition();
    setAnnotations([
      ...annotations,
      {
        x: (pos.x - stage.x()) / stage.scaleX(),
        y: (pos.y - stage.y()) / stage.scaleY(),
        text: `Annotation ${annotations.length + 1}`,
      },
    ]);
  };

  const handleExport = () => {
    const dataURL = stageRef.current.toDataURL();
    const link = document.createElement('a');
    link.download = 'stitched-result.png';
    link.href = dataURL;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleCompare = (originalImageUrl) => {
    const img = new window.Image();
    img.src = originalImageUrl;
    img.onload = () => {
      setCompareImage(img);
      setMode('compare');
    };
  };

  return (
    <div>
      <Stage
        width={800}
        height={600}
        onWheel={handleWheel}
        draggable={mode === 'pan'}
        onDragStart={handleDragStart}
        onDragEnd={handleDragEnd}
        onClick={handleClick}
        ref={stageRef}
      >
        <Layer>
          {image && (
            <Image
              image={image}
              x={position.x}
              y={position.y}
              scaleX={scale}
              scaleY={scale}
            />
          )}
          {annotations.map((annotation, i) => (
            <React.Fragment key={i}>
              <Rect
                x={annotation.x - 5}
                y={annotation.y - 5}
                width={10}
                height={10}
                fill="red"
              />
              <Text
                x={annotation.x + 5}
                y={annotation.y + 5}
                text={annotation.text}
                fontSize={16}
                fill="red"
              />
            </React.Fragment>
          ))}
        </Layer>
        {mode === 'compare' && compareImage && (
          <Layer>
            <Image
              image={compareImage}
              x={comparePosition.x}
              y={comparePosition.y}
              opacity={0.5}
              draggable
              onDragMove={(e) => setComparePosition(e.target.position())}
            />
          </Layer>
        )}
      </Stage>
      <div>
        <button onClick={() => setMode('pan')}>Pan</button>
        <button onClick={() => setMode('annotate')}>Annotate</button>
        <button onClick={handleExport}>Export</button>
        {originalImages.map((img, index) => (
          <button key={index} onClick={() => handleCompare(img)}>
            Compare with Original {index + 1}
          </button>
        ))}
      </div>
    </div>
  );
};

export default EnhancedStitchingResultViewer;

// Usage:
// <EnhancedStitchingResultViewer 
//   imageUrl="path/to/stitched/image.jpg"
//   originalImages={["path/to/original1.jpg", "path/to/original2.jpg"]}
// />
