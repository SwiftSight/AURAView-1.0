// Backend (Node.js + Express)
// File: server.js
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Sample API routes
app.get('/api/health', (req, res) => {
    res.json({ status: 'Server is running' });
});

app.get('/api/data', (req, res) => {
    // Sample data
    res.json({ 
        message: 'Data from backend',
        items: [
            { id: 1, name: 'Item 1' },
            { id: 2, name: 'Item 2' }
        ]
    });
});

app.post('/api/data', (req, res) => {
    const data = req.body;
    // Handle posted data
    res.json({ 
        message: 'Data received',
        receivedData: data 
    });
});

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

// Frontend (React)
// File: App.jsx
import { useState, useEffect } from 'react';
import axios from 'axios';

const API_BASE_URL = 'http://localhost:5000/api';

function App() {
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        fetchData();
    }, []);

    const fetchData = async () => {
        try {
            const response = await axios.get(`${API_BASE_URL}/data`);
            setData(response.data);
            setLoading(false);
        } catch (err) {
            setError('Error fetching data');
            setLoading(false);
        }
    };

    const handleSubmit = async (formData) => {
        try {
            const response = await axios.post(`${API_BASE_URL}/data`, formData);
            console.log('Success:', response.data);
        } catch (err) {
            console.error('Error:', err);
        }
    };

    if (loading) return <div>Loading...</div>;
    if (error) return <div>{error}</div>;

    return (
        <div className="app">
            <h1>Full Stack App</h1>
            {data && (
                <div>
                    <h2>{data.message}</h2>
                    <ul>
                        {data.items.map(item => (
                            <li key={item.id}>{item.name}</li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
}

export default App;

// Configuration files
// File: package.json (Backend)
{
    "name": "fullstack-backend",
    "version": "1.0.0",
    "main": "server.js",
    "dependencies": {
        "express": "^4.17.1",
        "cors": "^2.8.5",
        "body-parser": "^1.19.0"
    },
    "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js"
    }
}

// File: package.json (Frontend)
{
    "name": "fullstack-frontend",
    "version": "1.0.0",
    "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "axios": "^1.3.4"
    },
    "scripts": {
        "start": "vite",
        "build": "vite build"
    }
}
