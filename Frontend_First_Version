import React, { useState } from 'react';
import { Upload, Box, AlertTriangle } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

const ImageTo3DUploader = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    setError(null);
    
    if (file) {
      if (!file.type.startsWith('image/')) {
        setError('Please upload an image file (PNG, JPG, JPEG)');
        return;
      }
      
      setSelectedFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreview(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleUpload = async () => {
    if (!selectedFile) {
      setError('Please select an image first');
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      // Here you would typically make an API call to your backend
      // For demonstration, we'll simulate a delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Simulated error (1 in 4 chance)
      if (Math.random() < 0.25) {
        throw new Error('Failed to process image. Please try again.');
      }

      // Success case would handle the response from your backend
      console.log('Processing complete');
      
    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="text-center">
        <h1 className="text-3xl font-bold mb-4">2D to 3D Model Converter</h1>
        <p className="text-gray-600 mb-8">Upload a 2D image to generate a 3D model</p>
      </div>

      {/* Upload Section */}
      <div className="border-2 border-dashed rounded-lg p-8 text-center">
        <input
          type="file"
          accept="image/*"
          onChange={handleFileSelect}
          className="hidden"
          id="file-upload"
        />
        <label
          htmlFor="file-upload"
          className="cursor-pointer flex flex-col items-center"
        >
          <Upload className="w-12 h-12 text-gray-400 mb-4" />
          <span className="text-gray-600">
            {selectedFile ? selectedFile.name : 'Click to upload or drag and drop'}
          </span>
        </label>
      </div>

      {/* Preview Section */}
      {preview && (
        <div className="grid grid-cols-2 gap-6">
          <div className="border rounded-lg p-4">
            <h2 className="text-lg font-semibold mb-2">Original Image</h2>
            <img
              src={preview}
              alt="Preview"
              className="w-full h-64 object-contain"
            />
          </div>
          <div className="border rounded-lg p-4">
            <h2 className="text-lg font-semibold mb-2">3D Preview</h2>
            <div className="w-full h-64 bg-gray-100 flex items-center justify-center">
              <Box className="w-12 h-12 text-gray-400" />
              <span className="ml-2 text-gray-500">3D preview will appear here</span>
            </div>
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div className="flex justify-center">
        <button
          onClick={handleUpload}
          disabled={!selectedFile || isLoading}
          className={`px-6 py-2 rounded-lg ${
            !selectedFile || isLoading
              ? 'bg-gray-300 cursor-not-allowed'
              : 'bg-blue-600 hover:bg-blue-700'
          } text-white font-medium`}
        >
          {isLoading ? 'Processing...' : 'Generate 3D Model'}
        </button>
      </div>

      {/* Error Alert */}
      {error && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
    </div>
  );
};

export default ImageTo3DUploader;
